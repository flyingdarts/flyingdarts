// <auto-generated/>
#pragma warning disable CS0618
using Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.Item;
using Flyingdarts.Meetings.Service.Generated.Dyte.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Flyingdarts.Meetings.Service.Generated.Dyte.Meetings
{
    /// <summary>
    /// Builds and executes requests for operations under \meetings
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class MeetingsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Flyingdarts.Meetings.Service.Generated.Dyte.meetings.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.Item.WithMeeting_ItemRequestBuilder"/></returns>
        public global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.Item.WithMeeting_ItemRequestBuilder this[Guid position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("meeting_id", position);
                return new global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.Item.WithMeeting_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the Flyingdarts.Meetings.Service.Generated.Dyte.meetings.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.Item.WithMeeting_ItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.Item.WithMeeting_ItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("meeting_id", position);
                return new global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.Item.WithMeeting_ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MeetingsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/meetings{?end_time*,page_no*,per_page*,search*,sort_by*,sort_order*,start_time*,status*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MeetingsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/meetings{?end_time*,page_no*,per_page*,search*,sort_by*,sort_order*,start_time*,status*}", rawUrl)
        {
        }
        /// <summary>
        /// Fetch all meetings for an organization
        /// </summary>
        /// <returns>A <see cref="global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsGetResponse?> GetAsMeetingsGetResponseAsync(Action<RequestConfiguration<global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsRequestBuilder.MeetingsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsGetResponse> GetAsMeetingsGetResponseAsync(Action<RequestConfiguration<global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsRequestBuilder.MeetingsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsGetResponse>(requestInfo, global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Fetch all meetings for an organization
        /// </summary>
        /// <returns>A <see cref="global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsMeetingsGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsResponse?> GetAsync(Action<RequestConfiguration<global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsRequestBuilder.MeetingsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsResponse> GetAsync(Action<RequestConfiguration<global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsRequestBuilder.MeetingsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsResponse>(requestInfo, global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Create a meeting
        /// </summary>
        /// <returns>A <see cref="global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsPostResponse?> PostAsMeetingsPostResponseAsync(global::Flyingdarts.Meetings.Service.Generated.Dyte.Models.CreateMeetingRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsPostResponse> PostAsMeetingsPostResponseAsync(global::Flyingdarts.Meetings.Service.Generated.Dyte.Models.CreateMeetingRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsPostResponse>(requestInfo, global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsPostResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Create a meeting
        /// </summary>
        /// <returns>A <see cref="global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use PostAsMeetingsPostResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsResponse?> PostAsync(global::Flyingdarts.Meetings.Service.Generated.Dyte.Models.CreateMeetingRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsResponse> PostAsync(global::Flyingdarts.Meetings.Service.Generated.Dyte.Models.CreateMeetingRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsResponse>(requestInfo, global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Fetch all meetings for an organization
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsRequestBuilder.MeetingsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsRequestBuilder.MeetingsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Create a meeting
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Flyingdarts.Meetings.Service.Generated.Dyte.Models.CreateMeetingRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Flyingdarts.Meetings.Service.Generated.Dyte.Models.CreateMeetingRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Fetch all meetings for an organization
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MeetingsRequestBuilderGetQueryParameters 
        {
            /// <summary>The end time range for which you want to retrieve the meetings. The time must be specified in ISO format.</summary>
            [QueryParameter("end_time")]
            public DateTimeOffset? EndTime { get; set; }
            /// <summary>The page number from which you want your page search results to be displayed.</summary>
            [QueryParameter("page_no")]
            public int? PageNo { get; set; }
            /// <summary>Number of results per page</summary>
            [QueryParameter("per_page")]
            public int? PerPage { get; set; }
            /// <summary>The search query string. You can search using the meeting ID or title.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("search")]
            public string? Search { get; set; }
#nullable restore
#else
            [QueryParameter("search")]
            public string Search { get; set; }
#endif
            /// <summary>Sort results by field</summary>
            [Obsolete("This property is deprecated, use SortByAsGetSortByQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sort_by")]
            public string? SortBy { get; set; }
#nullable restore
#else
            [QueryParameter("sort_by")]
            public string SortBy { get; set; }
#endif
            /// <summary>Sort results by field</summary>
            [QueryParameter("sort_by")]
            public global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.GetSort_byQueryParameterType? SortByAsGetSortByQueryParameterType { get; set; }
            /// <summary>Sort order for results</summary>
            [Obsolete("This property is deprecated, use SortOrderAsGetSortOrderQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sort_order")]
            public string? SortOrder { get; set; }
#nullable restore
#else
            [QueryParameter("sort_order")]
            public string SortOrder { get; set; }
#endif
            /// <summary>Sort order for results</summary>
            [QueryParameter("sort_order")]
            public global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.GetSort_orderQueryParameterType? SortOrderAsGetSortOrderQueryParameterType { get; set; }
            /// <summary>The start time range for which you want to retrieve the meetings. The time must be specified in ISO format.</summary>
            [QueryParameter("start_time")]
            public DateTimeOffset? StartTime { get; set; }
            /// <summary>Filter meetings by status</summary>
            [Obsolete("This property is deprecated, use StatusAsGetStatusQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("status")]
            public string? Status { get; set; }
#nullable restore
#else
            [QueryParameter("status")]
            public string Status { get; set; }
#endif
            /// <summary>Filter meetings by status</summary>
            [QueryParameter("status")]
            public global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.GetStatusQueryParameterType? StatusAsGetStatusQueryParameterType { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MeetingsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.MeetingsRequestBuilder.MeetingsRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MeetingsRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
