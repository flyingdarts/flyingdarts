// <auto-generated/>
#pragma warning disable CS0618
using Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.Item.Participants;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \meetings\{meeting_id}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithMeeting_ItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The participants property</summary>
        public global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.Item.Participants.ParticipantsRequestBuilder Participants
        {
            get => new global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.Item.Participants.ParticipantsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.Item.WithMeeting_ItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithMeeting_ItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/meetings/{meeting_id}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.Item.WithMeeting_ItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithMeeting_ItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/meetings/{meeting_id}", rawUrl)
        {
        }
        /// <summary>
        /// Fetch a meeting for an organization
        /// </summary>
        /// <returns>A <see cref="global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.Item.WithMeeting_GetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.Item.WithMeeting_GetResponse?> GetAsWithMeeting_GetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.Item.WithMeeting_GetResponse> GetAsWithMeeting_GetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.Item.WithMeeting_GetResponse>(requestInfo, global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.Item.WithMeeting_GetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Fetch a meeting for an organization
        /// </summary>
        /// <returns>A <see cref="global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.Item.WithMeeting_Response"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsWithMeeting_GetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.Item.WithMeeting_Response?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.Item.WithMeeting_Response> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.Item.WithMeeting_Response>(requestInfo, global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.Item.WithMeeting_Response.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Fetch a meeting for an organization
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.Item.WithMeeting_ItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.Item.WithMeeting_ItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Flyingdarts.Meetings.Service.Generated.Dyte.Meetings.Item.WithMeeting_ItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithMeeting_ItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
